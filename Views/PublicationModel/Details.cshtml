@model FollowPeers.Models.PublicationModel
@using FollowPeers.Models;
@{
    ViewBag.Title = "Publication Details";
}
@Html.Partial("_Header")
@{
    FollowPeers.Models.FollowPeersDBEntities followPeersDB = new FollowPeers.Models.FollowPeersDBEntities();
    string name = Membership.GetUser().UserName;
    ViewBag.UserName = name;
    FollowPeers.Models.UserProfile myprofile = followPeersDB.UserProfiles.First(p => p.UserName == name);
    AchievementLike achmodel = followPeersDB.AchievementLikes.SingleOrDefault(p => p.AchievementId == Model.publicationID && p.UserProfileId == myprofile.UserProfileId && p.Type == 6);
  
}
<div class="container">
    <div class="row">

        @Script("jquery.validate.min.js")
        @Script("jquery.validate.unobtrusive.min.js")
        @Script("jquery.bgiframe.js")
        @Script("jquery.mcdropdown.js")
        <link rel="stylesheet" type="text/css" href="../../Content/css/jquery.mcdropdown.css" />
        <link href="../../Content/css/jquery-ui.css" rel="stylesheet" type="text/css" />
        <div class="span9">
            <h3>@Html.DisplayFor(model => model.title)</h3>
            <div>
                <h4>By @Html.DisplayFor(model => model.author)</h4>
            </div>

            <div>
                <fieldset><legend>Abstract</legend></fieldset>
                @Html.DisplayFor(model => model.description)

                <fieldset><legend>Details</legend></fieldset>
                <table>
                    <tr>
                        <td style="font-weight: bold">Type:</td>
                        <td>@Html.DisplayFor(model => model.type)</td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold">Field:</td>
                        <td>@Html.DisplayFor(model => model.specialisation)</td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold">Year:</td>
                        <td>@Html.DisplayFor(model => model.year)</td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold">Status:</td>
                        <td>@Html.DisplayFor(model => model.status)</td>
                    </tr>


                    @if (Model.journal != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Journal:</td>
                            <td>@Html.DisplayFor(model => model.journal)</td>
                        </tr>               
                    }

                    @if (Model.publisher != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Publisher:</td>
                            <td>@Html.DisplayFor(model => model.publisher)</td>
                        </tr>               
                    }

                    @if (Model.conference != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Conference:</td>
                            <td>@Html.DisplayFor(model => model.conference)</td>
                        </tr>               
                    }


                    @if (Model.university != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">University:</td>
                            <td>@Html.DisplayFor(model => model.university)</td>
                        </tr>               
                    }


                    @if (Model.referenceID != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Location:</td>
                            <td>@Html.DisplayFor(model => model.referenceID)</td>
                        </tr>               
                    }

                    @if (Model.issue != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Issue:</td>
                            <td>@Html.DisplayFor(model => model.issue)</td>
                        </tr>               
                    }

                    @if (Model.volume != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Volume:</td>
                            <td>@Html.DisplayFor(model => model.volume)</td>
                        </tr>               
                    }

                    @if (Model.page != "default")
                    { 
                        <tr>
                            <td style="font-weight: bold">Page:</td>
                            <td>@Html.DisplayFor(model => model.page)</td>
                        </tr>               
                    }

                </table>

                <fieldset><legend>View Document</legend></fieldset>
                @if (Model.filename != null && Model.filename != "")
                {
                    <embed src="\\Content\\Files\\@Model.UserProfile.UserName\\Publications\\@Model.filename" />
                }
                else
                { 
                    <p>No pdf/doc version of this publication available.</p>
                }
            </div>

            <div style="width: 100%">
                <fieldset><legend>Comments</legend></fieldset>
                @{
                
                
                    <div>@{Html.RenderAction("Index", "Comment", new { ParentType = "PublicationModel", ParentId = Model.publicationID, });}</div>
                
                    
                    <div>
                        @using (Html.BeginForm("Create", "Comment", FormMethod.Post, new { ParentType = "PublicationModel", ParentId = Model.publicationID, SubmittedBy = Membership.GetUser().UserName, TimeSent = DateTime.Now, Flagged = false, Starred = false }))
                        {
                                
                            <input type="hidden" name="ParentType" value="PublicationModel" />
                            <input type="hidden" name="ParentId" value="@Model.publicationID" />
                            <input type="hidden" name="SubmittedBy" value="@ViewBag.UserName" />

                        
                            <div style="width: 100%;">
                                <textarea name="CommentBody" rows="2" style="width: 100%; resize: none;"></textarea>

                            </div>
                            <input class="btn btn-primary" type="submit" value="Post Comment" />
                                
                        }
                    </div>
                }

            </div>

            <input id="publicationIdAJAX" style="display:none" type="text" value="@Model.publicationID" >
        </div>
        <div class="span3">
            <div class="scrollspy" data-spy="scroll" data-target=".navlist" style="margin-left: 5px">

                @{
                    if (myprofile.UserProfileId == Model.ownerID)
                    {
                    @Html.ActionLink("Edit", "Edit", new { id = Model.publicationID }) <text>|</text>
                    <button style="color:red; border:none; background: none; padding:0;" onclick="confirmDelete(@Model.publicationID, @Model.ownerID)">Delete</button>
                    
                    <br />
                    <br />
                    }

                    List<FollowPeers.Models.Favourite> FavouritePublications = followPeersDB.Favourites.Where(p => p.UserProfile.UserProfileId == myprofile.UserProfileId && p.ItemType == 6).ToList();
                    bool favMatched = false;

                    foreach (Favourite thisFav in FavouritePublications)
                    {
                        if (thisFav.ItemTypeId == Model.publicationID)
                        {
                            favMatched = true;
                            break;
                        }
                    }

                    if (favMatched == true)
                    { //pub is a favourite
                    <span class="label label-default" style="background-color: green">
                        <img src="../../Content/images/icons/16x16/accept.png" />
                        Favourited
                    </span>    
                    }
                    else
                    { // pub is not a fav
                        using (Html.BeginForm("FavouritePub", "PublicationModel"))
                        { 
                    <input type="hidden" name="id" value="@Model.publicationID" />
                    <input type="hidden" name="Pubname" value="@Model.title" />
                    <span class="label label-default" style="background-color: white; color:black">
                        <input type="image" src="../../Content/images/icons/16x16/accept.png" value="submit" />
                        Mark Favourite
                    </span>
                        }
                    }
                    <br />
                    <br />
                    
                    <text>Recommend Publication:</text>
                    <div>
                        @using (Html.BeginForm("Recommend", "PublicationModel"))
                        {
                                
                            <input type="hidden" name="id" value="@Model.publicationID" />
                            <span>
                                <input id="recommend" name="Names" style="width: 150px" />
                                <input type="image" src="../../Content/images/icons/16x16/arrow_right.png" value="submit" />
                            </span>
                        }
                    </div>
     
                    if (@achmodel == null)
                    {
                    <span class="label label-default" style="background-color: green">
                        <input type="image" src="../../Content/images/icons/16x16/thumb_up.png" value="submit" />
                        Like Publication
                    </span> 
                       
                    }
                    else
                    {
                    <span class="label label-default" style="background-color: red">
                        <input type="image" src="../../Content/images/icons/16x16/thumb_down.png" value="submit" />
                        Unlike Publication
                    </span> 
                    }
                    <br />
                    <br />
                    
                    List<int> ranks = new List<int>();

                    for (int i = 1; i <= 5; i++)
                    {
                        ranks.Add(i);
                    }
                    <text>Select Rank: </text> @Html.DropDownList("Ranks", new SelectList(ranks), new { style = "width:45px" })
                    <br />
                    <br />
                    
                    <span class="label label-default">View Count: @Model.viewCount </span> 
                    <span class="label label-default" style="margin-left: 10px; background-color: green;">@Model.Likes
                        <img src="../../Content/images/icons/16x16/thumb_up.png" />
                    </span>
                }

            </div>


        </div>
    </div>
</div>
@Html.Partial("_Footer")
@helper Script(string scriptName)
{
    <script src="@Url.Content("~/Scripts/" + scriptName)" type="text/javascript"></script>
}

<script type="text/javascript" language="javascript">
    function confirmDelete(pubId, ownerId) {
        var r = confirm("Are you sure you want to Delete this publication?");
        if (r == true) {
            $.post("@Url.Action("Delete", "PublicationModel")", { id: pubId }, function () { window.location = "/Profile/Index/" + ownerId; });
        }
        else {
        }
    }

    $(document).ready(function () {




        tab('tab1');
        ftab('ftab1');
        if ($('#RecommendList').length) {
            AutoComplete1();
        }
        function AutoComplete1() {
            $("#Recommend").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        type: "POST",
                        url: "/PublicationModel/RecommendedNames",
                        data: { searchText: extractLast(request.term), maxResults: 10 },
                        dataType: "json",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.name, value: item.name, id: item.value }
                            }))
                        },
                        error: function (result) {
                            alert("Error");
                        }
                    });
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(", ");
                    $('#RecommendList').append("<input type='hidden' id='Invites" + ui.item.id + "' name='InvitesId'  />");
                    $('#Recommend' + ui.item.id).val(ui.item.id);
                    return false;
                }
            });
            $("#Recommend").bind("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                $(this).data("autocomplete").menu.active) {
                    event.preventDefault();
                }
            })
            function split(val) {
                return val.split(/,\s*/);
            }
            function extractLast(term) {
                return split(term).pop();
            }

        }

        if ($('#RecommendList2').length) {
            AutoComplete2();
        }
        function AutoComplete2() {
            $("#Recommend2").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        type: "POST",
                        url: "/PublicationModel/RecommendedNames",
                        data: { searchText: extractLast(request.term), maxResults: 10 },
                        dataType: "json",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.name, value: item.name, id: item.value }
                            }))
                        },
                        error: function (result) {
                            alert("Error");
                        }
                    });
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(", ");
                    $('#RecommendList2').append("<input type='hidden' id='Invites2" + ui.item.id + "' name='InvitesId2'  />");
                    $('#Recommend2' + ui.item.id).val(ui.item.id);
                    return false;
                }
            });
            $("#Recommend2").bind("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                $(this).data("autocomplete").menu.active) {
                    event.preventDefault();
                }
            })
            function split(val) {
                return val.split(/,\s*/);
            }
            function extractLast(term) {
                return split(term).pop();
            }

        }
    });



    $("#bookmark_it").click(function () {
        // Get publication ID
        var id1 = $("#publicationIdAJAX").val();
        var pubId = $("#publicationIdAJAX").val();
        // Send Ajax Request
        $.ajax({
            type: "POST",
            url: "/PublicationModel/AddBookmark",
            data: { id: pubId, RecommendedNames: ID },
            success: function () {
                alert('Bookmarked');
                window.history.back(-1);
            }
        });
    });

    $("#Click2").click(function () {
        var pubId = $("#publicationIdAJAX").val();
        var ID = $("#Recommend2").val();
        $.ajax({
            type: "POST",
            url: "/PublicationModel/Recommend",
            data: { id: pubId, NameId: ID },
            success: function () {
                alert('Recommendation has been sent to user:');
                window.history.back(-1);
            }
        });
    });


    $("#Click1").click(function () {
        var pubId = $("#publicationIdAJAX").val();
        var ID = $("#Recommend").val();
        $.ajax({
            type: "POST",
            url: "/PublicationModel/Recommend",
            data: { id: pubId, NameId: ID },
            success: function () {
                alert('Recommendation has been sent');
                window.history.back(-1);
            }
        });
    });

    $("#Topic").click(function () {
        var pubId = $("#publicationIdAJAX").val();
        window.location = "../AddTopic/" + pubId;
    });


    $("#unbookmark_it").click(function () {
        // Get publication ID
        var id2 = $("#publicationIdAJAX").val();
        // Send Ajax Request
        $.ajax({
            type: "POST",
            url: "/PublicationModel/DeleteBookmark",
            data: "ID=" + id2,
            success: function () {
                alert('Un-Bookmarked');
                window.history.back(-1);
            }
        });
    });

    $("#Likepub").click(function () {
        var id1 = $("#publicationIdAJAX").val();
        var nameId = $("#SubmittedBy").val();
        // Send Ajax Request
        $.ajax({
            type: "POST",
            url: "/PublicationModel/Like",
            data: { id: id1, NameId: nameId },
            success: function () {
                window.location = "../Details/" + id1;
            }
        });
    });

    $("#Ranks").change(function () {
        var id1 = $(this).val();
        var PubId = $("#publicationIdAJAX").val();
        alert(id1);
        $.ajax({
            type: "POST",
            url: "/PublicationModel/Rank",
            data: { id: id1, pubId: PubId },
            success: function () {
                window.location = "../Details/" + PubId;
            }
        });
    });

    $("#Unlikepub").click(function () {
        var id1 = $("#achid").val();
        var pubid1 = $("#publicationIdAJAX").val();
        var nameId = $("#SubmittedBy").val();
        // Send Ajax Request
        $.ajax({
            type: "POST",
            url: "/PublicationModel/Unlike",
            data: { id: id1, pubId: pubid1, NameId: nameId },
            success: function () {
                window.location = "../Details/" + pubid1;
            }
        });
    });


    function tab(tab) {
        document.getElementById('tab1').style.display = 'none';
        document.getElementById('tab2').style.display = 'none';
        document.getElementById('li_tab1').setAttribute("class", "");
        document.getElementById('li_tab2').setAttribute("class", "");
        document.getElementById(tab).style.display = 'block';
        document.getElementById('li_' + tab).setAttribute("class", "active");
    };

    function ftab(ftab) {
        document.getElementById('ftab1').style.display = 'none';
        document.getElementById('ftab3').style.display = 'none';
        document.getElementById('f_ftab3').setAttribute("class", "");
        document.getElementById('f_ftab1').setAttribute("class", "");
        document.getElementById('ftab2').style.display = 'none';
        document.getElementById('f_ftab2').setAttribute("class", "");
        document.getElementById(ftab).style.display = 'block';
        document.getElementById('f_' + ftab).setAttribute("class", "active");
    };


</script>

