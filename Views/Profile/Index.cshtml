@model FollowPeers.Models.UserProfile
@using FollowPeers.Models;
@{
    //at first, assume must check credentials, and assume all show is false.
    ViewBag.Title = ViewBag.Name;
    bool showOnlyAbout = true; //deafault value
    bool toCheck = true;
    bool showEmail = false;
    bool showPhone = false;
    bool showMobile = false;
    bool showAddress = false;
    bool showEducation = false;
    bool showPublication = false;
    bool showPatent = false;
    bool showAboutMe = false;
    bool showCourse = false;
    bool showEmployment = false;
    bool showNoticeBoard = false;
    FollowPeers.Models.FollowPeersDBEntities followPeersDB = new FollowPeers.Models.FollowPeersDBEntities();
    List<FollowPeers.Models.Achievement> myAchievements = followPeersDB.Achievements.Where(p => p.UserProfileId == Model.UserProfileId).ToList();
}

@if (Membership.GetUser().UserName == Model.UserName)
{
    toCheck = false; //if you are viewing your own profile, no need to check privacy
}
@{
    //tocheck true means this is not your profile
    if (toCheck == true)
    {
        string membername = Membership.GetUser().UserName;


        IQueryable<int> custQuery = from cust in followPeersDB.Relationships where cust.personAName == membername && cust.personBName == Model.UserName select cust.tier;

        //if such a member exists in the relationships, we can proceed to check access
        if (custQuery.Count() != 0)
        {
            //check if the user has tier1 access for the information of the profile
            foreach (int tier in custQuery)
            {
                FollowPeers.Models.Tier temp = Model.Tiers.SingleOrDefault(p => p.Level == tier);
                if (temp.Email == 1) { showEmail = true; }
                if (temp.Phone == 1) { showPhone = true; }
                if (temp.Mobile == 1) { showMobile = true; }
                if (temp.Address == 1) { showAddress = true; }
                if (temp.Education == 1) { showEducation = true; }
                if (temp.Publication == 1) { showPublication = true; }
                if (temp.Patent == 1) { showPatent = true; }
                if (temp.AboutMe == 1) { showAboutMe = true; }
                if (temp.Employment == 1) { showEmployment = true; }
                if (temp.Noticeboard == 1) { showNoticeBoard = true; }
            }
        }

        //else (meaning public view.. so check if the user has declared the information as public, or tier1. tier1 means must have access to see)
        //notice board will not be visible to someone not in the peers
        else
        {
            FollowPeers.Models.Tier temp = Model.Tiers.SingleOrDefault(p => p.Level == 1);
            if (temp.Email == 1) { showEmail = true; }
            if (temp.Phone == 1) { showPhone = true; }
            if (temp.Mobile == 1) { showMobile = true; }
            if (temp.Address == 1) { showAddress = true; }
            if (temp.Education == 1) { showEducation = true; }
            if (temp.Publication == 1) { showPublication = true; }
            if (temp.Patent == 1) { showPatent = true; }
            if (temp.AboutMe == 1) { showAboutMe = true; }
            if (temp.Employment == 1) { showEmployment = true; }

        }
    } 
}

<head>
    <title>Profile</title>
    <style media="screen" type="text/css">
        .profilepagetabs ul
        {
            padding: 0px;
            margin: 0px;
            margin-left: 0px;
            width: 180px;
        }

            .profilepagetabs ul li
            {
                display: block;
                height: auto;
                width: 180px;
                text-align: center;
                padding-top: 2px;
                padding-bottom: 2px;
            }

                .profilepagetabs ul li a
                {
                    /* The following four lines are to make the top left and top right corners of the content area rounded. */
                    -moz-border-radius-topleft: 4px;
                    border-top-left-radius: 4px;
                    -moz-border-radius-topright: 4px;
                    border-top-right-radius: 4px;
                    -moz-border-radius-bottomleft: 4px;
                    border-bottom-left-radius: 4px;
                    -moz-border-radius-bottomright: 4px;
                    border-bottom-right-radius: 4px;
                    margin-left: 0px;
                    padding-left: 10px;
                    padding-right: 10px;
                    border: solid;
                    border-width: 1px;
                    border-color: #45aeea;
                    font-weight: bold;
                    color: #45aeea;
                }

                    .profilepagetabs ul li a:hover
                    {
                        text-decoration: underline;
                    }


        .profilepagetabs li.current a
        {
            background-color: #45aeea;
            color: white;
        }
    </style>
</head>

@*Header*@
@Html.Partial("_Header")
@*Container*@
<div class="container">

    @*rows within container*@
    <div class="row">

        <div class="span2">
            @*Left Sidebar*@
            @{
                string name = Membership.GetUser().UserName;
                FollowPeers.Models.UserProfile myprofile = followPeersDB.UserProfiles.SingleOrDefault(p => p.UserName == name);
                if (Model.UserProfileId == myprofile.UserProfileId)
                {
                @Html.Partial("_SideBar_ProfilePage", new ViewDataDictionary { { "Name", myprofile.FirstName + " " + myprofile.LastName } })
                }
                else
                {
                @Html.Partial("_SideBar_ProfilePage", new ViewDataDictionary { { "PhotoUrl", @Model.PhotoUrl }, { "ProfileName", @Model.UserProfileId }, { "Name", @Model.FirstName + " " + Model.LastName } })
 
                }
            
                <div class="menu nav nav-tabs nav-stacked" style="list-style: none; margin-top: 15px;">
                    @if (Membership.GetUser().UserName != Model.UserName)
                    {
                        if (ViewBag.Alreadyfollowed != 1)
                        {
                            //not followed
                            using (Html.BeginForm("Follow", "Profile", new { url = HttpContext.Current.Request.Url.AbsoluteUri }))
                            {
                        <input type="hidden" name="username" value="@Model.UserName" />
                        <input class="btn btn-primary" type="submit" value="Follow" />
                            }


                            showOnlyAbout = true;

                        }

                        else if (ViewBag.Alreadyfollowed == 1)
                        {
                            //already a peer
                            using (Html.BeginForm("UnFollow", "Profile", new { url = HttpContext.Current.Request.Url.AbsoluteUri }))
                            {
                        <input type="hidden" name="username" value="@Model.UserName" />
                        <input class="btn btn-primary" type="submit" value="UnFollow" style="" />
                            }
                            showOnlyAbout = false;
                        }
                        

                    }
                    else
                    {
                        showOnlyAbout = false;
                    }
                </div>
                
                <div class="profilepagetabs" style="border: none;">
                    @if (showOnlyAbout == true)
                    {
                        
                            <ul class="menu nav nav-tabs nav-stacked" style="list-style: none; margin-top: 15px;">
                                <li class="current"><a>ABOUT</a></li>
                            </ul>
                    }
                    else
                    {
                        <ul class="menu nav nav-tabs nav-stacked" style="list-style: none; margin-top: 15px;">
                            <li class="current" id="li_noticeboard" onclick="tabresponse('noticeboard')"><a>NOTICE BOARD</a></li>
                            <li id="li_photos" onclick="tab('photos')"><a>PHOTOS</a></li>
                            <li id="li_publications" onclick="tabresponse('publications')"><a>PUBLICATIONS</a></li>
                            <li id="li_jobs" onclick="tab('jobs')"><a>JOBS</a></li>
                            <li id="li_courses" onclick="tab('courses')"><a>COURSES</a></li>
                            <li id="li_about" onclick="tabresponse('about')"><a>ABOUT</a></li>
                        </ul>
                    }
                </div>
            }
        </div>

        <div class="span9 main-content">
            <div class="box">
                @if (Model.activated == true)
                {
                    
                    <div>
                        @Html.Partial("SimplePostBar")
                    </div>
                    
                    
                    
                    <div id="noticeboard">
                        <br />
                        @Html.Partial("ProfileNoticeBoardTabView")
                    </div>
                    
                    <div id="publications" style="display: none;">
                        <br />
                        @Html.Partial("ProfilePublicationTabView", Model.Publication)
                    </div>
                    
                    <div id="about" style="display: none;">
                        @*if user, then edit privileges*@
                        @if (Membership.GetUser().UserName == Model.UserName)
                        {
                            @Html.Partial("ProfileAboutTabViewWithEdit")
                            
                        }
                        else
                        {
                            @Html.Partial("ProfileAboutTabView")
                        }
                        <br />

                    </div>
                     
           
                }

                else
                {
                    <div style="font-weight: bold; border-radius: 4px; border: 1px solid #ccc; padding: 4px 10px; color: dimGray; background: #eee; margin-bottom: 5px; margin-bottom: 5px;">
                        User Account is not activated.
                    </div>
            
                }
            </div>
        </div>

        @*<div class="span2 right-sidebar">
            @Html.Partial("_ProfilepageRightSidebar")
        </div>*@
    </div>
    <div class="row">
        @Html.Partial("_Footer")
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        function filterPath(string) {
            return string
              .replace(/^\//, '')
              .replace(/(index|default).[a-zA-Z]{3,4}$/, '')
              .replace(/\/$/, '');
        }
        var locationPath = filterPath(location.pathname);
        var scrollElem = scrollableElement('html', 'body');

        $('a[href*=#]').each(function () {
            var thisPath = filterPath(this.pathname) || locationPath;
            if (locationPath == thisPath
            && (location.hostname == this.hostname || !this.hostname)
            && this.hash.replace(/#/, '')) {
                var $target = $(this.hash), target = this.hash;
                if (target) {
                    var targetOffset = $target.offset().top;
                    $(this).click(function (event) {
                        event.preventDefault();
                        $(scrollElem).animate({ scrollTop: targetOffset }, 400, function () {
                            location.hash = target;
                        });
                    });
                }
            }
        });

        // use the first element that is "scrollable"
        function scrollableElement(els) {
            for (var i = 0, argLength = arguments.length; i < argLength; i++) {
                var el = arguments[i],
                    $scrollElement = $(el);
                if ($scrollElement.scrollTop() > 0) {
                    return el;
                } else {
                    $scrollElement.scrollTop(1);
                    var isScrollable = $scrollElement.scrollTop() > 0;
                    $scrollElement.scrollTop(0);
                    if (isScrollable) {
                        return el;
                    }
                }
            }
            return [];
        }

    });

</script>


<script type="text/javascript">
    //scripts for the tabs on profile page
    function tabresponse(tab) {
        //document.getElementById('Form_Area').style.display = 'none'; //hide all forms
        document.getElementById('noticeboard').style.display = 'none';
        document.getElementById('about').style.display = 'none';
        document.getElementById('publications').style.display = 'none';
        document.getElementById('li_noticeboard').setAttribute("class", "");
        document.getElementById('li_about').setAttribute("class", "");
        document.getElementById('li_publications').setAttribute("class", "");


        if (tab == 'noticeboard') {

            document.getElementById('noticeboard').style.display = 'block';
            document.getElementById('li_' + tab).setAttribute("class", "active");
            document.getElementById('li_' + tab).setAttribute("class", "current");


        }

        if (tab == 'about') {
            document.getElementById('about').style.display = 'block';
            document.getElementById('li_' + tab).setAttribute("class", "active");
            document.getElementById('li_' + tab).setAttribute("class", "current");


        }

        if (tab == 'publications') {
            document.getElementById('publications').style.display = 'block';
            document.getElementById('li_' + tab).setAttribute("class", "active");
            document.getElementById('li_' + tab).setAttribute("class", "current");

        }



        else {
            return;
        }
    }
</script>


