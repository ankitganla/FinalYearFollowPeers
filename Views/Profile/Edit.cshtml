@model FollowPeers.Models.UserProfile 
@{
    ViewBag.Title = @Model.FirstName + " " + @Model.LastName + " Update Your Profile";
}

<head>
    <title>Edit Profile</title>
    <script src="@Url.Content("~/Scripts/modernizr-1.7.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui-1.8.11.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.tools.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.bgiframe.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.mcdropdown.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.rte.js")" type="text/javascript"></script>
    <link href="/Content/css/rte.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../Content/css/jquery.mcdropdown.css" />


    <script type="text/javascript" language="javascript">
        $(document).ready(function () {
            $("#Country").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Profile/FindCountryNames", type: "POST", dataType: "json",
                        data: { searchText: request.term, maxResults: 10 },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.Name, value: item.Name, id: item.CountryId }
                            }))
                        }
                    })
                },
            });


        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            counter = 0;
            if ($('#Edu0').length) { AutoComplete(0); counter++; $('#Delete0').click(function () { Delete(0); }); }
            if ($('#Edu1').length) { AutoComplete(1); counter++; $('#Delete1').click(function () { Delete(1); }); }
            if ($('#Edu2').length) { AutoComplete(2); counter++; $('#Delete2').click(function () { Delete(2); }); }
            $('#Add').click(function () { AddField(); });
            if (counter == 0) AddField();
            function AutoComplete(id) {
                $("#Organization" + id).autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: "/Profile/FindOrganizationNames", type: "POST", dataType: "json",
                            data: { searchText: request.term, maxResults: 10 },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, id: item.OrganizationId }
                                }))
                            }
                        })
                    },
                });

                $("#Country" + id).autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: "/Profile/FindCountryNames", type: "POST", dataType: "json",
                            data: { searchText: request.term, maxResults: 10 },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, id: item.CountryId }
                                }))
                            }
                        })
                    },
                });
            }


            function AddField() {
                if (counter >= 3) alert("You can add a maximum of 3 Education Records");
                else {
                    var name;
                    if (!($('#Edu0').length)) name = 0;
                    else if (!($('#Edu1').length)) name = 1;
                    else if (!($('#Edu2').length)) name = 2;
                    $('#EducationFields').append("<div id='Edu" + name + "'><fieldset><legend>Education History</legend><div id='Delete" + name + "'  style='float: right;background: lightGrey;color: dimGray;padding: 0px 6px;cursor: pointer;' title='Click to delete this record.'>x</div><div class='editor-label'>Institution</div><div class='editor-field'> <input type='text' id='Organization" + name + "' name='Organization' style='margin-left:2px;width:210px'  /> </div><div class='editor-label'>Country</div><div class='editor-field'><input type='text' name='Country' id='Country" + name + "' /></div><div class='editor-label'>Degree</div><div class='editor-field'><input type='text' name='Degree'  /></div> <div class='editor-label'> Start Year (yyyy)</div><div class='editor-field'><input type='text' name='startYear'  /></div><div class='editor-label'>End Year (yyyy)</div><div class='editor-field'><input type='text' name='endYear' /> </div></fieldset></div>");
                    $('#Delete' + name).click(function () { Delete(name); });
                    counter++;
                    AutoComplete(name);

                }
            }
            function Delete(id) {

                if ($('#Edu' + id).length) {
                    $('#Edu' + id).slideUp('fast', function () { $('#Edu' + id).remove(); });
                    counter--;
                }
            }
        });
    </script>

    <script type="text/javascript" language="javascript">


        function encodeComment() {
            document.getElementById("#TextArea").value = htmlEncode(document.getElementById("#TextArea").value);
        }
        function htmlEncode(str) {
            // This must be done in a proper order to achive desired results.
            str = this.replaceAll(str, "&", "&amp;");
            str = this.replaceAll(str, "<", "&lt;");
            str = this.replaceAll(str, ">", "&gt;");
            str = this.replaceAll(str, " ", "&nbsp;");
            return str;
        }
        function replaceAll(str, subStr, newStr) {
            var offset = 0;
            var index = str.indexOf(subStr);
            while (index != -1) {
                str = str.substr(0, index) + newStr + str.substr(index + subStr.length);
                offset = index + newStr.length;
                index = str.indexOf(subStr, offset);
            }
            return str;
        }

        var dd, val;
        $(document).ready(function () {
            $(".rte-zone").rte("/Content/css/rte.css", "/Content/css/images/");
            $(":input[data-datepicker]").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: 'dd-mm-yy',
                yearRange: '1920:1996'
            });


            var options = new Object();
            options.select = select_handler;
            options.init = init;
            var counter = 0;
            var interest = new Array(3);
            var exceeded = 0;
            var int1 = 0, int2 = 0, int3 = 0;
            function deletenode(num) {
                $('#interest' + num).slideUp('slow', function () { $('#interest' + num).remove(); });
                counter--;
                if (num == 1) int1 = 0;
                if (num == 2) int2 = 0;
                if (num == 3) int3 = 0;
            }

            if ($("#interest1").length) {
                int1 = 1;
                interest[0] = $("input[id='Specialization1.Specializationid']").val();
                //alert(interest[0]);
                counter++;
                $('#delete1').click(function () { deletenode(1); });
            }
            if ($("#interest2").length) {
                int2 = 1;
                interest[1] = $("input[id='Specialization2.Specializationid']").val();
                counter++;
                $('#delete2').click(function () { deletenode(2); });
            }
            if ($("#interest3").length) {
                int3 = 1;
                interest[2] = $("input[id='Specialization3.Specializationid']").val();
                counter++;
                $('#delete3').click(function () { deletenode(3); });
            }
            $("#SpecializationId").mcDropdown("#SpecializationIdmenu", options);

            function init() {
                dd = $("#SpecializationId").mcDropdown();
                $("#Organization").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: "/Profile/FindOrganizationNames", type: "POST", dataType: "json",
                            data: { searchText: request.term, maxResults: 10 },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, id: item.OrganizationId }
                                }))
                            }
                        })
                    },
                });
                $("#Departments").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: "/Profile/FindDepartmentNames", type: "POST", dataType: "json",
                            data: { searchText: request.term, maxResults: 10 },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, id: item.DepartmentId }
                                }))
                            }
                        })
                    },
                });
            }


            function select_handler() {
                val = dd.getValue();
                //alert(val);
                var value = val.toString().substring(0, val.toString().search(','));

                if ((value != interest[0]) && (value != interest[1]) && (value != interest[2]) && (counter != 3)) {

                    var texttoappend = $("li[ id = " + value + " ]").text();
                    if (texttoappend.length < 60) {
                        counter++;
                        var tempnum;
                        if (int1 == 0) { tempnum = 1; int1 = 1; }
                        else if (int2 == 0) { tempnum = 2; int2 = 1; }
                        else if (int3 == 0) { tempnum = 3; int3 = 1; }
                        interest[counter - 1] = value;
                        $('#interest').append("<div id='interest" + tempnum + "' style='width:100%;display:none'><div class='editor-label'><label>Interest</label></div><div class='editor-field' style='height:20px; border-bottom: 1px solid #CCC;width: 50%; float:left'>" + texttoappend + "</div><div id='delete" + tempnum + "' style='color:#666;cursor:pointer;'>x</div><div style='clear:both'></div></div>");
                        $('#interest' + tempnum).append("<input name='Specialization' id ='Specialization" + tempnum + "_Specializationid' type='hidden' value='" + value + "'>");
                        $('#interest' + tempnum).slideToggle("slow");

                        $('#delete' + counter).click(function () { deletenode(counter); });
                    }
                }
                else if ((counter == 3) && (value != interest[0]) && (value != interest[1]) && (value != interest[2])) {
                    exceeded = 1;
                    $('#notification').html("You can enter a maximum of 3 research interests");
                    $('#notification').slideDown("slow");
                }
            }
        });
    </script>
</head>

@*Header*@
@Html.Partial("_Header")
@*Container*@
<div class="container">

    @*rows within container*@
    <div class="row">
        @*Left Sidebar*@
        @Html.Partial("_ProfilePhotoSidebar")

        @*Main Content*@
        <div class="span9 main-content">
            <div class="box">
                <a id="pagetop"></a>
                <h2>Update Your Profile</h2>
                @if (Model.firsttime == true)
                {
                    <div class="alert">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <strong>Complete Your Profile!</strong>
                    </div>
                }
                <div>

                    <div class="box">
                        @{Html.RenderAction("ProgressTracker", "Profile");}

                    </div>
                </div>
                @{var message = ViewData["message"];}
                
                <ul style="margin:0;">
                    
                    <a href="#personal_section" style="border-right: solid">Personal </a>
                     <a href="#contact_section" style="border-right: solid"> Contact </a>
                     <a href="#education_section" style="border-right: solid"> Eduaction </a>
                     <a href="#professional_section"> Professional</a>
                </ul>

                @using (Html.BeginForm())
                {
                    if (message != null)
                    {
                    <div style="background: #eee; padding: 5px; color: green;">@message</div>
                    }
                    @Html.ValidationSummary(true)
                    <fieldset>
                        <a id="personal_section"></a>
                        <legend>Personal</legend>
                        @Html.HiddenFor(model => model.UserProfileId)
                        @Html.HiddenFor(model => model.UserName)
                        @Html.HiddenFor(model => model.activated)
                        <div class="editor-label">
                            @Html.LabelFor(model => model.FirstName)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.FirstName)
                            @Html.ValidationMessageFor(model => model.FirstName)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LastName)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.LastName)
                            @Html.ValidationMessageFor(model => model.LastName)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Gender)
                        </div>
                        <div class="editor-field">
                            @{List<string> list1 = new List<string>();
                              list1.Add("Male");
                              list1.Add("Female");
                            }
                            @Html.DropDownList("Gender", new SelectList(list1))
                            @Html.ValidationMessageFor(model => model.Gender)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Status, "Marital Status")
                        </div>
                        <div class="editor-field">
                            @{List<string> list2 = new List<string>();
                              list2.Add("Single");
                              list2.Add("Married");
                              list2.Add("Divorced");
                              list2.Add("Widowed");
                            }
                            @Html.DropDownList("Status", new SelectList(list2))
                            @Html.ValidationMessageFor(model => model.Status)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Birthday)
                        </div>
                        <div class="editor-field">
                            <input id="EventDate" class="small" type="date" name ="EventDate" value= "@Model.Birthday" data-datepicker="datepicker">
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Country, "Country")
                        </div>
                        <div class="editor-field">
                            <input type="text" id="Country" name="Country" style="margin-left:2px;width:350px" value="@Model.Country" />
                        </div>

                        <div class="editor-label" style="width: 100%;">
                            <label for="AboutMe">About Me (Say something about yourself)</label>
                        </div>
                        <div class="editor-field" style="">
                            <textarea id="TextArea" rows="3" cols="120" name="AboutMe" class="rte-zone" style="width: 350px;">@Model.AboutMe</textarea>
                        </div>
                        <input class="btn btn-primary" type="submit" value="Save" style="float: right;" />
                        
                        
                    </fieldset>
                    <a href="#pagetop" style="font-size: x-small; float:right;">[back to top]</a>
                    
                    <fieldset>
                        <a id="contact_section"></a>
                        <legend>Contact Information</legend>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Street1, "Address Line1")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Contact.Street1, new { style = "width: 200px; margin-left: 2px;" })
                            @Html.ValidationMessageFor(model => model.Contact.Street1)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Street2, "Address Line2")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Contact.Street2, new { style = "width: 200px;margin-left: 2px;" })
                            @Html.ValidationMessageFor(model => model.Contact.Street2)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.City)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Contact.City)
                            @Html.ValidationMessageFor(model => model.Contact.City)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Country)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Contact.Country)
                            @Html.ValidationMessageFor(model => model.Contact.Country)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Mobile)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Contact.Mobile)
                            @Html.ValidationMessageFor(model => model.Contact.Mobile)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Phone)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Contact.Phone)
                            @Html.ValidationMessageFor(model => model.Contact.Phone)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Fax)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Contact.Fax)
                            @Html.ValidationMessageFor(model => model.Contact.Fax)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Email)
                        </div>
                        <div class="editor-field">
                            @{
                              string prompt = "";
                              if (Model.Contact.Email == null) { prompt = Model.UserName; }
                              else { prompt = Model.Contact.Email; }
                            }
                            <input id="Contact_Email" name="Contact.Email" style="width: 200px;margin-left: 2px;" type="text" value="@prompt" class="valid">
                            @Html.ValidationMessageFor(model => model.Contact.Email)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Contact.Website)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Contact.Website, new { style = "width: 200px;margin-left: 2px;" })
                            @Html.ValidationMessageFor(model => model.Contact.Website)
                        </div>
                        <input class="btn btn-primary" type="submit" value="Save" style="float: right;" />
                    </fieldset>
                    <a href="#pagetop" style="font-size: x-small; float:right;">[back to top]</a>
                    
                    
                              int i = 0;
                    <div id="EducationFields">

                        @foreach (var E in Model.Educations)
                        {

                            string TempData = "Edu" + i.ToString();
                            string TempData2 = "Delete" + i.ToString();
                            string TempData3 = "Organization" + i.ToString();
                            string TempData4 = "Country" + i.ToString();
                            <div id=@TempData>
                                <fieldset>
                                    <a id="education_section"></a>
                                    <legend>Education History</legend>
                                    <div id=@TempData2  style="float: right;background: lightGrey;color: dimGray;padding: 0px 6px;cursor: pointer;" title="Click to delete this record.">
                                        x
                                    </div>
                                    <div class="editor-label">
                                        @Html.LabelFor(model => model.Organization, "Institution")
                                    </div>
                                    <div class="editor-field">
                                        <input type="text" id="@TempData3" name="Organization" style="margin-left:2px;width:210px" value="@Model.Educations.ElementAt(i).UniversityName" />
                                    </div>
                                    <div class="editor-label">
                                        Country
                                    </div>
                                    <div class="editor-field">
                                        <input type="text" name="Country" id="@TempData4" style="margin-left:2px;width:210px" value="@Html.Encode(Model.Educations.ElementAt(i).country)" />
                                    </div>
                                    <div class="editor-label">
                                        Degree
                                    </div>
                                    <div class="editor-field">
                                        <input type="text" name="Degree" value="@Model.Educations.ElementAt(i).Degree" />
                                    </div>

                                    <div class="editor-label">
                                        Start Year (yyyy)
                                    </div>
                                    <div class="editor-field">
                                        <input type="text" name="startYear" value="@Model.Educations.ElementAt(i).startYear" />
                                    </div>
                                    <div class="editor-label">
                                        End Year (yyyy)
                                    </div>
                                    <div class="editor-field">
                                        <input type="text" name="endYear" value="@Model.Educations.ElementAt(i).endYear" />
                                    </div>
                                </fieldset>
                                
                            </div>
            
                            i = i + 1;
                        }
                        <p>
                            <a class="btn" id="Add" style="" title="Click to add another record."><i class="icon-plus"></i></a>
                            <input type="submit" value="Save" class="btn btn-primary" style="float: right;">
                        </p>
                        <a href="#pagetop" style="font-size: x-small; float:right;">[back to top]</a>
                    </div>
                    
                    <fieldset>
                        <a id="professional_section"></a>
                        <legend>Professional</legend>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Organization, "Organization")
                        </div>
                        <div class="editor-field">
                            <input type="text" id="Organization" name="Organization" style="margin-left:2px;width:350px" value="@Model.Organization" />

                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Departments, "Department")
                        </div>
                        <div class="editor-field">
                            <input type="text" id="Departments" name="Departments" style="margin-left:2px;width:350px" value="@Model.Departments" />
                        </div>
                        <div id="Specialization" style="display: none; height: 22px;"></div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Specializations, "Primary Field of Research")
                        </div>
                        <div class="editor-field" style="float: left; width: auto">
                            <select multiple="multiple" name="Specialization" style="width: 300px; height: 150px">
                                @{ 
                            
                        FollowPeers.Models.FollowPeersDBEntities db = new FollowPeers.Models.FollowPeersDBEntities();

                        IQueryable<string> Query = (from entry in db.Specializations
                                                    orderby entry.Field
                                                    select entry.Field).Distinct();
                        int j = 0;
                        foreach (string entry in Query)
                        {
                            IQueryable<FollowPeers.Models.Specialization> Query2 = from specialization in db.Specializations orderby specialization.Field where specialization.Field == entry select specialization;
                            if (Model.Specializations.Where(p => p.Field == @entry).Count() == 0)
                            {
                                    <option value="@j">@entry</option>
                            }
                            else
                            {
                                    <option value="@i" selected="selected">@entry</option>
                            }
                            j = j + Query2.Count();
                        }
                                }

                            </select>


                        </div>
                        <input class="btn btn-primary" type="submit" value="Save" style="float: right;" />
                    </fieldset>
                    <a href="#pagetop" style="font-size: x-small; float:right;">[back to top]</a>
                  
                    
                }
            </div>

        </div>


    </div>

    <div class="row">
        @Html.Partial("_Footer")
    </div>

</div>

@*<ul id="SpecializationIdmenu" class="mcdropdown_menu" style="left:495px;">
@{  
    FollowPeers.Models.FollowPeersDBEntities db = new FollowPeers.Models.FollowPeersDBEntities();
    IQueryable<string> Query = (from entry in db.Specializations orderby entry.Field select entry.Field).Distinct();

    foreach (string entry in Query)
    {
        IQueryable<FollowPeers.Models.Specialization> Query2 = from specialization in db.Specializations orderby specialization.Field where specialization.Field == entry select specialization;
        <li>@entry
        <ul>
        @foreach (FollowPeers.Models.Specialization specialization1 in Query2)
        {
            <li rel="@specialization1.SpecializationId" id="@specialization1.SpecializationId">@specialization1.SpecializationName</li>
        }
        </ul></li>
    }
    
}*@


